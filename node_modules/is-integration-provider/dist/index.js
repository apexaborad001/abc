"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createOddMessages = exports.replaceMentValuesArrayConstructor = exports.mutipleValueReplacer = exports.singleValueReplacer = exports.singleTicketCardCreater = exports.responseCreater = exports.conditionCreaterWithValue = exports.conditionCreater = void 0;
function checkLengthOfArray(replaceMentKeysArray, replaceMentValueArray, replaceMentIn) {
    let isEqual = true;
    if (replaceMentKeysArray.length === 0 && replaceMentValueArray.length === 0 && replaceMentIn.length === 0)
        return { isEqual: false, message: "Array cannot be empty" };
    let arrayOfLengths = [replaceMentKeysArray.length, replaceMentValueArray.length, replaceMentIn.length];
    if (arrayOfLengths[0] !== arrayOfLengths[1])
        isEqual = false;
    if (arrayOfLengths[0] !== arrayOfLengths[2])
        isEqual = false;
    if (arrayOfLengths[2] !== arrayOfLengths[1])
        isEqual = false;
    if (isEqual)
        return { isEqual, message: "Success" };
    else
        return { isEqual, message: "Length of the array should be equal" };
}
function validateRichCardName(richCardName) {
    let richCards = ["message", "plainQuickReply", "ticketCard", "visualReply", "carousal", "oddMessages"];
    return richCards.includes(richCardName);
}
function validateRichCardNameInArray(richCardNamesArray) {
    let isValid = true;
    let richCards = ["message", "plainQuickReply", "ticketCard", "visualReply", "carousal", "oddMessages"];
    for (const name of richCardNamesArray) {
        if (!richCards.includes(name))
            isValid = false;
    }
    return isValid;
}
function conditionCreater(conditionType) {
    return [
        {
            "conditions": [
                {
                    "conditionType": conditionType,
                    "conditionValue": []
                }
            ],
            "replaceMentValues": []
        }
    ];
}
exports.conditionCreater = conditionCreater;
function conditionCreaterWithValue(conditionType) {
    return [
        {
            "conditions": [
                {
                    "conditionType": conditionType,
                    "conditionValue": [conditionType]
                }
            ],
            "replaceMentValues": []
        }
    ];
}
exports.conditionCreaterWithValue = conditionCreaterWithValue;
function responseCreater(response, conversationData) {
    if (response.length === 0)
        return {
            statusCode: 500,
            responseObject: [{ Status: "Failed", Data: response }],
            conversationData
        };
    else
        return {
            statusCode: 200,
            responseObject: [{ Status: "Success", Data: response }],
            conversationData
        };
}
exports.responseCreater = responseCreater;
function singleTicketCardCreater(conditionType) {
    return {};
}
exports.singleTicketCardCreater = singleTicketCardCreater;
function singleValueReplacer(conditionType, replaceKey, replaceValue, richCardName) {
    return [
        {
            "conditions": [
                {
                    "conditionType": conditionType,
                    "conditionValue": [conditionType]
                }
            ],
            "replaceMentValues": [
                {
                    replaceKey,
                    replaceIn: richCardName,
                    replaceValue,
                }
            ]
        }
    ];
}
exports.singleValueReplacer = singleValueReplacer;
function mutipleValueReplacer(conditionType, replaceMentArray) {
    return [
        {
            "conditions": [
                {
                    "conditionType": conditionType,
                    "conditionValue": [conditionType]
                }
            ],
            "replaceMentValues": replaceMentArray
        }
    ];
}
exports.mutipleValueReplacer = mutipleValueReplacer;
function replaceMentValuesArrayConstructor(replaceMentKeysArray, replaceMentValueArray, replaceMentIn) {
    try {
        let replacementArray = [];
        let isValidInput = checkLengthOfArray(replaceMentKeysArray, replaceMentValueArray, replaceMentIn);
        let isRichCardValid = validateRichCardNameInArray(replaceMentIn);
        if (isValidInput["isEqual"] && isRichCardValid) {
            for (let i = 0; i < replaceMentKeysArray.length; i++) {
                replacementArray.push({
                    replaceKey: replaceMentKeysArray[i],
                    replaceIn: replaceMentIn[i],
                    replaceValue: replaceMentValueArray[i]
                });
            }
            return replacementArray;
        }
        else {
            if (!isValidInput["isEqual"])
                throw isValidInput["message"];
            if (!isRichCardValid)
                throw "Invalid rich card nname added!";
        }
    }
    catch (err) {
        console.log(err);
    }
}
exports.replaceMentValuesArrayConstructor = replaceMentValuesArrayConstructor;
function createOddMessages(conditionType) {
    return [
        {
            "conditions": [
                {
                    "conditionType": conditionType,
                    "conditionValue": [conditionType]
                }
            ],
            "replaceMentValues": []
        }
    ];
}
exports.createOddMessages = createOddMessages;
//# sourceMappingURL=index.js.map