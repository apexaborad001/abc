function checkLengthOfArray(replaceMentKeysArray,replaceMentValueArray,replaceMentIn){
    let isEqual = true;
    if(replaceMentKeysArray.length === 0 && replaceMentValueArray.length === 0 && replaceMentIn.length === 0) return {isEqual:false,message:"Array cannot be empty"}
    let arrayOfLengths = [replaceMentKeysArray.length,replaceMentValueArray.length,replaceMentIn.length];
    if(arrayOfLengths[0] !== arrayOfLengths[1]) isEqual = false;
    if(arrayOfLengths[0] !== arrayOfLengths[2]) isEqual = false;
    if(arrayOfLengths[2] !== arrayOfLengths[1]) isEqual = false;
    if(isEqual) return {isEqual,message:"Success"}
    else return {isEqual,message:"Length of the array should be equal"}
}

function validateRichCardName(richCardName){
    let richCards = ["message","plainQuickReply","ticketCard","visualReply","carousal","oddMessages"] 
    return richCards.includes(richCardName)
}

function validateRichCardNameInArray(richCardNamesArray){
    let isValid = true
    let richCards = ["message","plainQuickReply","ticketCard","visualReply","carousal","oddMessages"] 
    for (const name of richCardNamesArray) {
        if(!richCards.includes(name)) isValid = false
    }
    return isValid
}

export function conditionCreater(conditionType){
    return [
        {
           "conditions":[
              {
                 "conditionType":conditionType,
                 "conditionValue":[]
              }
           ],
           "replaceMentValues":[]
        }
    ]
}

export function conditionCreaterWithValue(conditionType){
    return [
        {
           "conditions":[
              {
                 "conditionType":conditionType,
                 "conditionValue":[conditionType]
              }
           ],
           "replaceMentValues":[]
        }
    ]
}

export function responseCreater(response,conversationData){
    if(response.length === 0)
        return {
            statusCode:500,
            responseObject:[{Status:"Failed",Data:response}],
            conversationData
        }
    
    else
        return { 
                statusCode:200,
                responseObject:[{Status:"Success",Data:response}],
                conversationData
        }
}

export function singleTicketCardCreater(conditionType){
    return {}
}

export function singleValueReplacer(conditionType,replaceKey,replaceValue,richCardName){
    return [
        {
           "conditions":[
              {
                 "conditionType":conditionType,
                 "conditionValue":[conditionType]
              }
           ],
           "replaceMentValues":[
                {
                    replaceKey,
                    replaceIn:richCardName,
                    replaceValue,
                }
           ]
        }
    ]
}

export function mutipleValueReplacer(conditionType,replaceMentArray){
    return [
        {
           "conditions":[
              {
                 "conditionType":conditionType,
                 "conditionValue":[conditionType]
              }
           ],
           "replaceMentValues":replaceMentArray
        }
    ]
}

export function replaceMentValuesArrayConstructor(replaceMentKeysArray,replaceMentValueArray,replaceMentIn){
    try{
        let replacementArray = [];
        let isValidInput = checkLengthOfArray(replaceMentKeysArray,replaceMentValueArray,replaceMentIn); 
        let isRichCardValid = validateRichCardNameInArray(replaceMentIn)
        if(isValidInput["isEqual"] && isRichCardValid){
            for (let i = 0 ; i< replaceMentKeysArray.length;i++) {
                replacementArray.push({
                    replaceKey: replaceMentKeysArray[i],
                    replaceIn: replaceMentIn[i],
                    replaceValue: replaceMentValueArray[i]
                })
            }
            return replacementArray
        }
        else {
            if(!isValidInput["isEqual"]) throw isValidInput["message"]
            if(!isRichCardValid) throw "Invalid rich card nname added!"
        } 
    }
    catch(err){
        console.log(err)
    }
}

export function createOddMessages(conditionType){
    return [
        {
           "conditions":[
              {
                 "conditionType":conditionType,
                 "conditionValue":[conditionType]
              }
           ],
           "replaceMentValues":[]
        }
    ]
}

// module.exports = {
//     conditionCreater,
//     responseCreater,
//     singleTicketCardCreater,
//     singleValueReplacer,
//     mutipleValueReplacer,
//     replaceMentValuesArrayConstructor,
//     createOddMessages,
//     conditionCreaterWithValue
// }

//console.dir("gggggggggggggg", {depth: null, colors: true})